generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Segment {
  id            String   @id @default(cuid())
  segment       String @db.Text
  embeddings    String?  @db.Text
  authorId      String
  author        User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  diaryId       String
  diary         Diary     @relation(fields: [diaryId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([diaryId])
}

model Diary {
	id        String   @id @default(cuid())
  title     String 
  content   String  @db.Text
  isArchived Boolean @default(false)
  segments  Segment[]   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  @@index([authorId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  diaries       Diary[]
  segments      Segment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Segment {
  id         String  @id
  segment    String
  authorId   String
  diaryId    String
  embeddings String?

  @@index([authorId])
  @@index([diaryId])
}
