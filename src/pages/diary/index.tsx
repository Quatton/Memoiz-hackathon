import { type NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useState } from "react";
import Container from "src/components/Container";
import Nav from "src/components/Nav";
import { BsArchiveFill, BsArchive } from "react-icons/bs";
import { api } from "src/utils/api";

const DiaryPage: NextPage = () => {
  const { data: sessionData } = useSession();
  const { data: diaryData, refetch: refetchDiary } =
    api.diary.getMyDiaries.useQuery(
      undefined, // no input
      { enabled: sessionData?.user !== undefined }
    );
  const router = useRouter();

  const [loading, setLoading] = useState(false);

  const mutation = api.diary.createDiary.useMutation({
    onSuccess: async (_) => {
      await refetchDiary();
    },
    onError: (e) => {
      console.error(e);
    },
  });

  return (
    <Container>
      <Head>
        <title>Diary</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Nav
        breads={[
          { title: "Home", path: "/" },
          { title: "Diary", path: "/diary" },
        ]}
      />
      <main className="flex min-h-screen w-full flex-col items-center">
        <div className="w-full p-2">
          <table className="table-compact table w-full">
            <thead>
              <tr>
                <th></th>
                <th>Date</th>
                <th>Title</th>
                <th className="w-min">
                  <button
                    className="btn-primary btn-xs btn"
                    onClick={() => {
                      if (loading) return;
                      setLoading(true);
                      void mutation.mutateAsync({
                        title: "Untitled",
                        content: "",
                      });
                    }}
                  >
                    {loading ? "Loading..." : "New"}
                  </button>
                </th>
              </tr>
            </thead>
            <tbody>
              {diaryData?.map((diary) => (
                <tr
                  key={diary.id}
                  className="hover cursor-pointer"
                  onClick={() => {
                    if (loading) return;
                    setLoading(true);
                    void router.push(`/diary/${diary.id}`);
                  }}
                >
                  <td>
                    {diary.isArchived ? <BsArchiveFill /> : <BsArchive />}
                  </td>
                  <td>
                    {Intl.DateTimeFormat("en-US").format(
                      new Date(diary.createdAt)
                    )}
                  </td>
                  <td>{diary.title}</td>
                  <td></td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </main>
    </Container>
  );
};

export default DiaryPage;
