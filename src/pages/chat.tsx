import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useState } from "react";

import { api } from "src/utils/api";

const Home: NextPage = () => {
  const [query, setQuery] = useState<string>("");
  const [result, setResult] = useState<string>();
  const [loading, setLoading] = useState(false);
  const mutation = api.ai.askQuestion.useMutation({
    onSuccess: (e) => {
      setChat([
        ...chat,
        {
          text: e,
          type: "received",
        },
      ]);
      setLoading(false);
    },
    onError: (e) => {
      console.error(e);
      setLoading(false);
    },
  });

  const [chat, setChat] = useState<
    { text: string; type: "received" | "sent" }[]
  >([
    {
      text: "Hey, Jims",
      type: "received",
    },
  ]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="phone-4 artboard mx-auto flex min-h-screen w-full flex-col items-center justify-center gap-6">
        <div className="flex flex-col gap-3 rounded-xl bg-primary p-6 shadow-md">
          <h1 className="p-3 text-center text-3xl font-semibold text-white">{`Today's Mood`}</h1>
          <div className="grid w-fit grid-cols-5 justify-center gap-3">
            {Array.from(Array(5).keys()).map((x) => {
              return (
                <div
                  className="flex h-8 w-8 items-center justify-center rounded-full bg-white text-primary transition-colors hover:cursor-pointer hover:bg-slate-200"
                  key={x}
                >
                  {x}
                </div>
              );
            })}
          </div>
        </div>
        <div className="w-full rounded-md bg-slate-50 py-16">
          {chat.map((x, idx) => {
            return (
              <div
                key={idx}
                className={`chat ${
                  x.type === "received" ? "chat-start" : "chat-end"
                }`}
              >
                <div className="chat-bubble">{x.text}</div>
              </div>
            );
          })}
        </div>
        <form
          className="form-control"
          onSubmit={(e) => {
            e.preventDefault();
            setChat([
              ...chat,
              {
                text: query,
                type: "sent",
              },
            ]);
            mutation.mutate({ question: `${query}` });
            setQuery("");
          }}
        >
          <div className="input-group">
            <input
              type="text"
              value={query}
              onChange={(e) => {
                setQuery(e.target.value);
              }}
              placeholder="Searchâ€¦"
              className="input-bordered input"
            />
            <button type="submit" className="btn-primary btn-square btn">
              Send
            </button>
          </div>
        </form>

        <button className="btn-primary btn">Ask me a question</button>
        <button className="btn-primary btn">Save</button>
      </main>
    </>
  );
};

export default Home;
