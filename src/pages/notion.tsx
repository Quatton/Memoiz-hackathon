import { type NextPage } from "next";
import Head from "next/head";
import { MdAdd } from "react-icons/md";
import Container from "src/components/Container";
import Nav from "src/components/Nav";
import { api } from "src/utils/api";
import { AddDatabaseModal } from "src/components/AddDatabaseModal";
import { useState } from "react";
import { useNotionDatabaseStore } from "src/utils/stores/notionDatabaseStore";
import { isFullDatabase, isFullPage } from "@notionhq/client";
import { NotionDatabase } from "@prisma/client";

const NotionPage: NextPage = () => {
  const { data: syncedDatabases, refetch } =
    api.notion.getSyncedDatabases.useQuery();
  const { isOpen, setIsOpen, shownDatabaseId, setShownDatabaseId } =
    useNotionDatabaseStore();

  const [nextCursor, setNextCursor] = useState<string | undefined>();

  const { data: shownDatabase } = api.notion.getDatabaseById.useQuery(
    {
      // Enable when this is not undefined so safe to assert non-null
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      id: shownDatabaseId!,
      next_cursor: nextCursor,
    },
    {
      enabled: !!shownDatabaseId,
    }
  );

  // here we are going to check if shownDatabase is in syncedDatabases
  // if so then we should set the current database metadata to that
  const currentDatabaseMetadata = syncedDatabases?.find((database) => {
    return database.databaseId === shownDatabaseId;
  });

  const syncDBMutation = api.notion.syncDatabase.useMutation();

  return (
    <Container>
      <Head>
        <title>Diary</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Nav />
      <main className="flex w-full flex-col items-center gap-4 px-5">
        <div className="flex w-full max-w-4xl gap-2">
          <select className="select-bordered select grow">
            {syncedDatabases && syncedDatabases.length > 0 ? (
              syncedDatabases?.map((database) => {
                return (
                  <option key={database.id} value={database.id}>
                    {database.title}
                  </option>
                );
              })
            ) : (
              <option value="0">No synced databases found</option>
            )}
          </select>
          <button
            className="btn-primary btn"
            onClick={() => {
              setIsOpen(true);
            }}
          >
            <MdAdd size={24} />
          </button>
        </div>
        {shownDatabaseId && (
          <div className="w-full max-w-4xl overflow-hidden overflow-x-auto">
            <div className="rounded-lg border border-base-100 bg-base-200 p-4">
              <div>
                <h2 className="mb-4 text-3xl font-bold">
                  {shownDatabase?.database &&
                  isFullDatabase(shownDatabase?.database) ? (
                    shownDatabase?.database?.title[0]?.plain_text ??
                    "(Untitled)"
                  ) : (
                    <span className="font-semibold">(Cannot retrieve)</span>
                  )}
                </h2>
              </div>
              <div>
                <span>Last updated at:</span>
                {shownDatabase?.database &&
                isFullDatabase(shownDatabase?.database) ? (
                  <span className="ml-1">
                    {Intl.DateTimeFormat("en-US", {
                      dateStyle: "medium",
                      timeStyle: "short",
                    }).format(
                      new Date(shownDatabase?.database?.last_edited_time)
                    )}
                  </span>
                ) : (
                  <span className="ml-1 font-semibold">(Cannot retrieve)</span>
                )}
              </div>
              <div>
                <span>Last synced at:</span>
                {currentDatabaseMetadata?.lastSync ? (
                  <span className="ml-1">
                    {Intl.DateTimeFormat("en-US", {
                      dateStyle: "medium",
                      timeStyle: "short",
                    }).format(new Date(currentDatabaseMetadata?.lastSync))}
                  </span>
                ) : (
                  <span className="ml-1 font-semibold">Not yet</span>
                )}
                <button
                  className="btn-success btn-xs btn ml-1"
                  onClick={() => {
                    syncDBMutation.mutate({
                      databaseId: shownDatabaseId,
                    });
                  }}
                >
                  Sync
                </button>
              </div>
            </div>
          </div>
        )}
        {shownDatabaseId && (
          <div className="w-full max-w-4xl overflow-hidden overflow-x-auto">
            <table className="table-zebra table-compact table w-full shadow-md">
              <thead className="table-header-group">
                <tr className="table-row">
                  {shownDatabase?.database?.properties &&
                    Object.entries(shownDatabase?.database?.properties)
                      .filter(([_, config]) => {
                        return (
                          config.type == "title" ||
                          config.type == "created_time"
                        );
                      })
                      .map(([propertyKey, _]) => {
                        return (
                          <th key={propertyKey} className="p-2">
                            {propertyKey}
                          </th>
                        );
                      })}
                </tr>
              </thead>
              <tbody className="table-row-group">
                {shownDatabase?.pages.results.filter(isFullPage).map((page) => {
                  return (
                    <tr key={page.id} className="table-row">
                      {Object.entries(page.properties)
                        .filter(([_, config]) => {
                          return (
                            config.type == "title" ||
                            config.type == "created_time"
                          );
                        })
                        .map(([propertyKey, property]) => {
                          return (
                            <td key={propertyKey} className="p-2">
                              {property.type == "title" && (
                                <span>
                                  {property.title[0]?.plain_text ??
                                    "(Untitled)"}
                                </span>
                              )}
                              {property.type == "created_time" && (
                                <span>
                                  {Intl.DateTimeFormat("en-US", {
                                    dateStyle: "medium",
                                    timeStyle: "short",
                                  }).format(new Date(property.created_time))}
                                </span>
                              )}
                            </td>
                          );
                        })}
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        )}
      </main>

      <AddDatabaseModal />
    </Container>
  );
};

export default NotionPage;
